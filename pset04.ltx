\documentclass[11pt]{amsart}
\usepackage[margin=1.0in]{geometry}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{enumerate}
\input{macros.ltx}
\title{Haskell Programming Problem Set 4}
\author{Lennart Jansson and Brandon Azad}

\begin{document}
\maketitle
Read Chapter 7 and Chapter 8 of \textit{Learn You a Haskell}, but you can ignore the bits about typeclasses and functors. We'll discuss them in depth next week.
\section*{Using Maps}
Here are a couple problems to practice using the \texttt{Data.Map} type. It's a good idea to import the module qualified to avoid namespace collisions.
\begin{problem}{Histograms}
Write a function \texttt{makeHistogram ::\ [a] -> Map a Int} that takes a list of elements and creates a \texttt{Map} from the distinct elements of the list to the number of times each element appears in the list. (Hint: higher-order functions make things pretty!)

\example{makeHistogram "hello"}{fromList [('e',1),('h',1),('l',2),('o',1)]}
\end{problem}
\begin{problem}{Changing passwords}
In this problem we'll be dealing with the following types and type synonyms, that could be used in the backend of a web application with user logins.
\begin{verbatim}
type Username = String
type Password = String
type PassMap = Map Username Password
type PassMapModifier = PassMap -> PassMap
data PasswordChangeViewmodel = PCVM {
  cpvUsername :: Username,
  cpvOldPassword :: Password,
  cpvNewPassword1 :: Password,
  cpvNewPassword2 :: Password
  } deriving (Show)
\end{verbatim}
Write a function \texttt{changePasswordModifier ::\ PasswordChangeViewmodel -> PassMapModifier}, that will give a \texttt{PassMapModifier} that will change a user's password, which is a function that can be applied to the actual \texttt{Map} being used by the application. For security, the password should only be changed if the old password matches the user's current password, and if the two new passwords match.

In real-world Haskell programming, it's considered good practice to use type synonyms like this, even though \texttt{Username}s and \texttt{Password}s aren't represented by different types, since it makes it even clearer what a data structure like \texttt{Map Username Password} should represent.
\end{problem}
\section*{Practice with Maybe and Either}
\texttt{Maybe} and \texttt{Either} are two very important types in Haskell that are seen almost everywhere elegant error handling is required. Here are a few easy problems to get a sense of how they behave.
\begin{problem}{Bind}
In this function we will continue to be coy about what monads actually are and continue to give vague hints. Here you will implement bind for the Maybe monad.

Write a function \texttt{bindMaybe ::\ Maybe a -> (a -> Maybe b) -> Maybe b}. If the first parameter is \texttt{Nothing} then the function can't be applied and the result should be \texttt{Nothing} as well.

\example{bindMaybe (Just "lennart") ($\lambda$ name -> Map.lookup name passwordMap)}{Just "mypassword"}

\example{bindMaybe (Just "notauser") ($\lambda$ name -> Map.lookup name passwordMap)}{Nothing}
\end{problem}
\begin{problem}{Data.Maybe functions}
The Data.Maybe module contains many useful functions for working with \texttt{Maybe}s. Here are two simple ones to practice implementing:
\begin{enumerate}
\item Write the function \texttt{catMaybes ::\ [Maybe a] -> [a]}, which takes a list of \texttt{Maybe}s and returns a list of only the \texttt{Just} values.

\example{catMaybes [Just 1, Just 2, Nothing, Just 3]}{[1, 2, 3]}
\item Write the function \texttt{mapMaybe ::\ (a -> Maybe b) -> [a] -> [b]}, which works the same as a standard \texttt{map}, but only keeps values in the return list if the function gives a \texttt{Just}, so when the function gives \texttt{Nothing} there is no corresponding value of type \texttt{b} in the return list.

\example{mapMaybe ($\lambda$ n -> if (even n) then (Just (n + 1)) else Nothing) [1..4]}{[3, 5]}
\end{enumerate}
\end{problem}
\begin{problem}{ArrowChoice}
This function comes from the module Control.Arrow, which is a typeclass related to generalized abstractions of functions. We probably won't have a chance to discuss it this quarter, but arrows are pretty cool. 

Write the function \texttt{(+++) ::\ (b -> c) -> (b' -> c') -> (Either b b' -> Either c c')}.
\end{problem}
\begin{problem}{Silliness}
Write a function \texttt{silliness ::\ Either a (Either b c) -> Either (Either a b) c}. It's not really useful for anything\ldots

\example{silliness (Left 1)}{Left (Left 1)}
\end{problem}
\section*{Skew heaps}
In the next few problems you will implement a skew heap data type, a simple, unstructured, breed of heaps well-adapted to Haskell that can be used to implement priority queues with every operation in at most $O(\log n)$ time. Cool!

A skew heap is built like a binary tree on the inside, where the heap property is respected. This means that every element is smaller than (or equal to) both of its children, and every element is larger than (or equal to) it's parent. The top of the heap is therefore the smallest element in the whole heap. Almost every operation on the skew heap is defined in terms of the union function, which combines two heaps into one and has type \texttt{union ::\ Ord a => SkewHeap a -> SkewHeap a -> SkewHeap a}. Therefore, we'll implement that first.

First, let's get used to the data type.
\begin{verbatim}
data SkewHeap a = Empty | SkewNode a (SkewHeap a) (SkewHeap a)
\end{verbatim}
The way to parse this type: a \texttt{SkewHeap} that contains elements of type \texttt{a} is either \texttt{Empty}, or is a \texttt{SkewNode}, a node of a skew heap, that contains an element of \texttt{a} at the root, then a left subheap \texttt{SkewHeap a}, then a right subheap \texttt{SkewHeap a}. That's it! It's really identical in structure to the binary tree discussed in \textit{Learn You a Haskell} Chapter 8, but with different names.
\begin{problem}{Simple things}
Implement \texttt{empty ::\ SkewHeap a}. This should give a skew heap with no elements in it.

Implement \texttt{singleton ::\ a -> SkewHeap a}. This should take a single element and put it in a skew heap with just that one element.

Implement \texttt{null ::\ SkewHeap a -> Bool}, which should return \texttt{True} if the skew heap is completely empty, and \texttt{False} if it does contain some elements.
\end{problem}
\begin{problem}{Union}
To take the union of two heaps, we find the heap with smaller root element, call it $t_a$ and the other $t_b$. Then, we take the union of $t_b$ and the right child of $t_a$, and that becomes the new left child of $t_a$. Then the original left child of $t_a$ becomes the new right child of $t_a$. Now $t_a$ contains all the elements from both $t_a$ and $t_b$, and the heap property is still respected, so the new $t_a$ is the union of the two heaps and is returned.

Implement \texttt{union ::\ Ord a => SkewHeap a -> SkewHeap a -> SkewHeap a}.

Also, define a new operator, for example \texttt{(+*+)}, that is an infix synonym for \texttt{union}. This will make your code prettier down the line since union will be very useful for the following functions.
\end{problem}
\begin{problem}{Insert and Extract}
Implement \texttt{insert ::\ Ord a => a -> SkewHeap a -> SkewHeap a}. This takes an element and a skew heap and returns the skew heap with that element added.

Implement \texttt{extractMin ::\ Ord a => SkewHeap a -> (a, SkewHeap a)}, which takes a skew heap, and returns a tuple of the minimum element in the skew heap as well as the modified skew heap without that element.
\end{problem}
\begin{problem}{List interface}
Implement \texttt{fromList ::\ Ord a => [a] -> SkewHeap a}, which takes a list (not necessarily in sorted order) and puts the elements in a skew heap (where the heap property is respected).

Implement \texttt{toAscList ::\ Ord a => SkewHeap a -> [a]}, which takes a skew heap and gives a list of all the elements in the heap in ascending order.
\end{problem}

\pgroupspace
Congratulations! You've implemented a new container type with a similar interface to \texttt{Data.Set} and \texttt{Data.Map}, and a not-too-shabby amount of code. Hopefully this gives you some idea about what goes on under the surface when you use container type modules: it's not mysterious stuff, just plain old Haskell you could understand or implement yourself. 

As a reward\ldots
\begin{problem}{Heap sort}
Use skew heaps to implement \texttt{heapsort ::\ Ord a => [a] -> [a]} :)
\end{problem}
\end{document}