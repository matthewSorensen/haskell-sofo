\documentclass[11pt]{amsart}
\usepackage[margin=1.0in]{geometry}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{enumerate}
\input{macros.ltx}
\title{Haskell Programming Problem Set 2}
\author{Lennart Jansson and Brandon Azad}

\begin{document}
\maketitle
Read Chapter 4 of \textit{Learn You a Haskell}, then implement the following functions. Use pattern matching, \texttt{let} and \texttt{where} bindings, and \texttt{case} expressions as appropriate to produce elegant code.
\section*{Function Syntax}
\begin{problem}{Days of the week}
Write a function \texttt{dayName ::\ Int -> String} that takes a number 0--6 and gives the corresponding name of the day of the week. If out of range, return an error message.

\example{dayName 0}{"Sunday"}

\example{dayName 4}{"Thursday"}

\example{dayName 11}{"Day out of range"}
\end{problem}
\begin{problem}{Passwords}
Write a function \texttt{validatePassword ::\ String -> Bool} that takes a potential password and returns \texttt{True} if it's a valid password and \texttt{False} if not. A password is valid if it is longer than 5 characters and shorter than 20 characters.

\example{validatePassword "bad"}{False}

\example{validatePassword "goodPassword"}{True}

\example{validatePassword "exceedinglyLongPassword"}{False}
\end{problem}

\pgroupspace To do the next problem you might need the function \texttt{sqrt ::\ (Floating a) => a -> a}, which does exactly what it says on the tin. \texttt{Float} is an instance of the typeclass \texttt{Floating}.
\begin{problem}{Triangles}
Let's represent triangles as 3-tuples \texttt{(Float, Float, Float)} where the three \texttt{Float}s are the lengths of the sides of the triangle.

Write a function \texttt{analyzeTriangle ::\ (Float, Float, Float) -> (Float, Float)} that takes a triangle and returns a tuple of the triangle's area and its perimeter. If the triangle is invalid (does not respect the triangle inequality), then return \texttt{(-1.0, -1.0)} to signify an error.

\example{analyzeTriangle (1, 1, 1)}{(0.4330127, 3.0)}

\example{analyzeTriangle (1, 1, sqrt 2)}{(0.5000001, 3.4142137)}

\example{analyzeTriangle (3, 1, 1)}{(-1.0, -1.0)}

Don't worry if your numbers are very slightly off as shown here, \texttt{Float}s are imprecise, having the same internal representation as floats in C.
\end{problem}
\section*{Recursive Functions}
Read Chapter 5 of \textit{Learn You a Haskell}.
\begin{problem}{Prelude}
Implement the following functions that are defined in Prelude. Since they're part of every Haskell file and \texttt{ghci} by default, you'll have to name each one something else. 
\begin{enumerate}
\item \texttt{gcd ::\ Integral a => a -> a -> a}, which finds the greatest common denominator of two integral numbers.
\item \texttt{(!!)\ ::\ [a] -> Int -> a}, which is used for indexing into a list. \texttt{foo !!\ 5} gets the 6th element in the list \texttt{foo}, for example.
\item \texttt{init ::\ [a] -> [a]}, which takes a list and removes the last element.
\item \texttt{cycle ::\ [a] -> [a]}, which makes a finite list into an infinite one by repeating the elements in the input list over and over.
\end{enumerate}

This is a really great way to generate lots of exercises for yourself if you want more. You already know how to implement many functions in Prelude, and many in the module Data.List. Read the first bit of Chapter 7 of \textit{Learn You a Haskell} for more information on Data.List.
\end{problem}
\begin{problem}{Mergesort}
Write a function \texttt{mergesort ::\ Ord a => [a] -> [a]} which implements the mergesort algorithm.

\example{mergesort [4, 2, 7, 6, 2]}{[2, 2, 4, 6, 7]}
\end{problem}

TODO: more complex problems
\section*{Tail-call recursion}
Tail-call recursion is a special recursive pattern that deserves special attention, even though it's not discussed in \textit{Learn You a Haskell}. Tail-call recursive functions are a subset of recursive functions, with the property that for every recursive call, the result of that recursive call is returned directly rather than being modified before returned. For every recursive pattern, the function must be defined as a call to itself with different parameters. To make things clearer, here's a factorial function implemented in a non-tail-call recursive way.

\begin{verbatim}
fact1 :: Int -> Int
fact1 0 = 1
fact1 n = n * (fact1 (n - 1))
\end{verbatim}

Notice how the result of the recursive call to \texttt{fact1} is multiplied by \texttt{n} before being returned, therefore this function is non-tail-call recursive. Here's the same function done tail-call recursively.

\begin{verbatim}
fact2 :: Int -> Int
fact2 n = fact2' n 1
  where fact2' 0 a = a
        fact2' n a = fact2' (n - 1) (a * n)
\end{verbatim}

Notice how the recursive call to the inner helper function \texttt{fact2'} is returned directly by \texttt{fact2'} instead of being modified. Like in this example here, tail-call recursive functions often require an extra parameter to hold an accumulator value or the result of a partial computation while function is recursing. Since the value of a tail-call recursive function is returned directly without being modified first, the modification must be done to parameters which are passed back into the recursive function.

Why do we care about tail-call recursion? When Haskell programs are compiled, tail-call recursive functions can be optimized so that instead of requiring the use of the call stack in assembly to handle each recursive call, the recursive computation can be modeled by a while loop and thus there is no risk of consuming too much memory! This very convienent process is known as tail-call optimization or tail-call elimination. The reason is that with tail-call recursive functions, the parameters of the function can become local variables that are continually modified with each recursive call; when the base case is reached, no other computation has to be done since the value of the function is returned unmodified all the way up the call stack. with non-tail-call recursive functions, the value returned from the function might be modified by the parameters in every stack frame, and there's no clever way to optimize that out without storing every stack frame in memory separately. 

If you have not taken CS107 yet, this may be confusing; don't worry, the internal representations of function calls and the stack is taught thoroughly in that class. The important thing to take away is that tail-call recursive functions are often faster and more efficient to calculate than other recursive functions in Haskell. Here are some problems to play with tail-call recursion.
\begin{problem}{Implementing sum}
Here is a version of the \texttt{sum} function that is not tail-call recursive. Reimplement it so that it uses tail-call recursion.
\begin{verbatim}
sum1 :: [Int] -> Int
sum1 [] = 0
sum1 (n:ns) = n + (sum1 ns)
\end{verbatim}
\end{problem}
\begin{problem}{Implementing reverse}
Here is a version of the \texttt{reverse} function that is not tail-call recursive. Reimplement it so that it uses tail-call recursion.
\begin{verbatim}
reverse1 :: [a] -> [a]
reverse1 [] = []
reverse1 (x:xs) = (reverse xs) ++ x
\end{verbatim}

Actually, this implementation is very bad for other reasons as well. The operation \texttt{a ++ b} is $O(|\mathtt{a}|)$, while cons-ing elements to the front of a list is only $O(1)$. This is due to the way lists are represented internally in Haskell. More about this later!
\end{problem}

\begin{problem}{Nested parentheses}
Write a function \texttt{ppParens ::\ String -> String} that pretty prints a string of nested parentheses, so that every parenthesis gets its own line, and is indented with tabs corresponding to its nested depth. Use tail-call recursion. 

In order to print a string in \texttt{ghci} to see if it's formatted correctly, you can use the function \texttt{putStrLn}, which is a function in the \texttt{IO} monad and therefore the details of which won't be discussed here.

\example{putStrLn "hello$\backslash$nworld"}{hello\\world}

\example{putStrLn (ppParens "(())((()())())")}{\vspace{-1.3\baselineskip}}
\begin{verbatim}
(
    (
    )
)
(
    (
        (
        )
        (
        )
    )
    (
    )
)
\end{verbatim}

Remember that building up a list by appending things to its back is much slower than building up a list by cons-ing things to its front. 
\end{problem}

TODO: more tail-call problems here
\end{document}