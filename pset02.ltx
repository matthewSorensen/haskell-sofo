\documentclass[11pt]{amsart}
\usepackage[margin=1.0in]{geometry}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{enumerate}
\input{macros.ltx}
\title{Haskell Programming Problem Set 2}
\author{Lennart Jansson and Brandon Azad}

\begin{document}
\maketitle
Read Chapter 4 of \textit{Learn You a Haskell}, then implement the following functions. Use pattern matching, \texttt{let} and \texttt{where} bindings, and \texttt{case} expressions as appropriate to produce elegant code.
\section*{Function Syntax}
\begin{problem}{Days of the week}
Write a function \texttt{dayName ::\ Int -> String} that takes a number 0--6 and gives the corresponding name of the day of the week. If out of range, return an error message.

\example{dayName 0}{"Sunday"}

\example{dayName 4}{"Thursday"}

\example{dayName 11}{"Day out of range"}
\end{problem}
\begin{problem}{Passwords}
Write a function \texttt{validatePassword ::\ String -> Bool} that takes a potential password and returns \texttt{True} if it's a valid password and \texttt{False} if not. A password is valid if it is longer than 5 characters and shorter than 20 characters.

\example{validatePassword "bad"}{False}

\example{validatePassword "goodPassword"}{True}

\example{validatePassword "exceedinglyLongPassword"}{False}
\end{problem}

\pgroupspace To do the next problem you might need the function \texttt{sqrt ::\ (Floating a) => a -> a}, which does exactly what it says on the tin. \texttt{Float} is an instance of the typeclass \texttt{Floating}.
\begin{problem}{Triangles}
Let's represent triangles as 3-tuples \texttt{(Float, Float, Float)} where the three \texttt{Float}s are the lengths of the sides of the triangle.

Write a function \texttt{analyzeTriangle ::\ (Float, Float, Float) -> (Float, Float)} that takes a triangle and returns a tuple of the triangle's area and its perimeter. If the triangle is invalid (does not respect the triangle inequality), then return \texttt{(-1.0, -1.0)} to signify an error.

\example{analyzeTriangle (1, 1, 1)}{(0.4330127, 3.0)}

\example{analyzeTriangle (1, 1, sqrt 2)}{(0.5000001, 3.4142137)}

\example{analyzeTriangle (3, 1, 1)}{(-1.0, -1.0)}

Don't worry if your numbers are very slightly off as shown here, \texttt{Float}s are imprecise, having the same internal representation as floats in C.
\end{problem}
\section*{Recursive Functions}
Read Chapter 5 of \textit{Learn You a Haskell}.
\begin{problem}{Prelude}
Implement the following functions that are defined in Prelude. Since they're part of every Haskell file and \texttt{ghci} by default, you'll have to name each one something else. 
\begin{enumerate}[1.]
\item \texttt{gcd ::\ Integral a => a -> a -> a}, which finds the greatest common denominator of two integral numbers.
\item \texttt{(!!)\ ::\ [a] -> Int -> a}, which is used for indexing into a list. \texttt{foo !!\ 5} gets the 6th element in the list \texttt{foo}, for example.
\item \texttt{init ::\ [a] -> [a]}, which takes a list and removes the last element.
\item \texttt{cycle ::\ [a] -> [a]}, which makes a finite list into an infinite one by repeating the elements in the input list over and over.
\end{enumerate}

This is a really great way to generate lots of exercises for yourself if you want more. You already know how to implement many functions in Prelude, and many in the module Data.List. Read the first bit of Chapter 7 of \textit{Learn You a Haskell} for more information on Data.List.
\end{problem}
\begin{problem}{Mergesort}
Write a function \texttt{mergesort ::\ Ord a => [a] -> [a]} which implements the mergesort algorithm.

\example{mergesort [4, 2, 7, 6, 2]}{[2, 2, 4, 6, 7]}
\end{problem}

TODO: more complex problems
\end{document}